Команды

Вопросы на 3.
Создание локальной версии репозитория:
git init
Добавление readme.md в локальный git-репозиторий и создание коммита:
git add readme.md
git commit -m "added readme"
Присоединение remote с именем origin:
git remote add origin https://github.com/...
Настройка upstream ветки:
git push -u origin master
Создание bare-репозитория:
git init --bare
Присоединение нового локального remote с именем local:
git remote add local <path>
Пуш репозитория в bare репозиторий
git push local master

Вопросы на 5
Создание новой локальной ветки
git checkout -b my-new-branch
Добавление HelloWorld.cpp в локальный git-репозиторий и создание коммита:
git add HelloWorld.cpp
git commit -m "added HelloWorld.cpp"
Настройка upstream ветки:
git push -u origin my-new-branch
Выкачка новых веток:
git fetch
Мёрдж my-remote-branch в my-new-branch:
git checkout my-new-branch
git merge origin/my-remote-branch

Вопросы на 6-7.
При попытке переключиться на другую ветку с незакоммиченными файлами с тем же
названием, что и новой ветке, гит предупреждает, что файл перезатрётся и предлагает удалить или 
сохранить файл в третье место. Также есть вариант воспользоваться git stash.
Для этого надо добавить файл в отслеживаемые, и применить команду
git stash
Git сохранит состояние внутри себя и очистит изменения в ветке и можно 
переключаться на другие ветки. Чтобы достать припрятанные файлы из 
stash`а можно вернуться в изначальную ветку и выполнить
git stash apply

При открытии папки в IDEA в ней появляются её ресурсные файлы в папке
.idea. Чтобы удалить её только из git можно выполнить команду
git rm --cached .idea
Чтобы файлы не добавлялись в git автоматически и сделать их 
неотслеживаемыми можно создать файл .gitignore:
echo $'.idea\n.gitignore' > .gitignore

Вопросы на 8:
После выполнения rebase с изменением сообщений коммита 'created b.py' гит посчитает этот и последующие 
коммиты как разные, поэтому запушить просто так не получится.
Для сквоша коммитов в один при выполнении rebase`a в интерактивном режиме ставим опцию squash 
перед всеми коммитами после первого. Гит предложит создать единый коммит из 5 последних и 
изменить сообщение коммита. Выходим, выполняем git rebase --continue. Теперь вместо 5
, у нас один коммит со всеми изменениями.
